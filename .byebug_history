continue
response.status 
response 
continue
expect(User.count).to eq(2)
User.all
User.ALL
User.count
user.count
user
continue
next
@user.save
@user = User.new(user_params)
params
continue
User.count
continue
user.all
user
User.count
User
continue
User.first
User.all
User.count
user
continue
User.count
continue
        expect(response).to have_http_status "302"
user.reload
user.realod
user
continue
user1
user
continue
user
continue
user
response.status
response.body
response
@user
continue
@user
user
@user
response.body
response
continue
@user.errors
@user
user
@user
next
@user
next
    expect(user.first_name).to eq('viajy')
    expect(response).to redirect_to(user_url(user))
    expect(response).to have_http_status(:found)
user.reload
response.status
response.body
continue
user
user.errors
user
assigns(:@user)
expect(assigns(:@user)
assign 
@user
user
continue
expect(response).to be_successful
response
continue
next
@user
@user.update(user_params)
user_params
params
@user
user
continue
user
continue
user
continue
user
continue
user
continue
User.last
User
user
continue
user.errors.full_messages
user.errors
user.error
      expect(User.count).to eq(0)
      expect(user).not_to be_valid
user
continue
user
user.valid?
continue
User
user
